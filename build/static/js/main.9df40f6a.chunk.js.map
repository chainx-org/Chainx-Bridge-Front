{"version":3,"sources":["hooks/useAccountModel.ts","hooks/useApi.ts","util/index.ts","hooks/useFeeContext.ts","hooks/useIssueRequests.ts","hooks/useRedeemRequest.ts","components/SideBar/style.tsx","components/SideBar/icons/ChainX_logo.svg","components/SideBar/icons/bridge.svg","components/SideBar/icons/history.svg","components/SideBar/icons/asset.svg","components/SideBar/icons/github.svg","components/SideBar/icons/twitter.svg","components/SideBar/icons/telegram.svg","components/SideBar/index.tsx","components/Header/style.tsx","components/Header/SelectAccount/style.tsx","components/Header/SelectAccount/icons/Account Settings.svg","components/Header/SelectAccount/index.tsx","components/Header/index.tsx","components/Loading/index.tsx","interfaces/xGatewayBitcoinV2/definitions.ts","interfaces/chainx/definitions.ts","components/NoExtensions/icons/logo.svg","components/NoExtensions/index.tsx","App.tsx","i18n.js","index.tsx"],"names":["createModel","useState","accounts","setAccounts","currentAccount","setCurrentAccount","ApiContext","createContext","useApi","useContext","convertBalanceToDisplayValue","balance","ChangeChainXAddress","address","encodeAddress","decodeAddress","FeeContext","useFeeContext","IssueRequestsContext","RedeemRequestsContext","SideBarStyle","styled","div","SideBarHeader","header","SideBarLogo","SideBarStatus","LinkStyle","NavLink","SideBarFooter","footer","SideBar","api","isApiReady","useTranslation","t","i18n","value","bridgeStatusContext","src","logo","alt","className","title","placement","to","exact","activeClassName","bridgeLogo","historyLogo","vaultLogo","githubLogo","twitterLogo","telegramLogo","language","onClick","changeLanguage","HeaderStyle","SelectAccountStyle","SelectAccount","accountModel","useAccountModel","AccountListModal","SetAccountListModal","setValue","currentAddress","name","buttonLogo","visible","onCancel","getContainer","Group","onChange","e","target","changeAccount","filter","item","toString","defaultValue","map","account","style","display","justifyContent","width","Header","antIcon","LoadingOutlined","fontSize","color","spin","LoadingStyle","Loading","indicator","size","types","CurrencyIdOf","BtcAddress","PerDispatchClass","normal","operational","mandatory","RequestId","BlockNumberFor","Vault","id","toBeIssuedTokens","issuedTokens","toBeRedeemedTokens","wallet","bannedUntil","status","SystemVault","VaultStatus","_enum","TradingPrice","price","decimal","IssueRequest","vault","openTime","requester","btcAddress","btcAmount","griefingCollateral","RpcVaultInfo","btcAddr","RedeemRequest","amount","redeemFee","reimburse","Status","Running","Error","Shutdown","ErrorCode","OrderStatus","Chain","AssetType","OrderType","Side","WithdrawalState","Memo","AssetInfo","token","tokenName","chain","decimals","desc","Handicap","highestBid","lowestAsk","CurrencyPair","base","quote","TradingPairProfile","currencyPair","pipDecimals","tickDecimals","tradable","OrderExecutedInfo","tradingHistoryIdx","pairId","maker","taker","makerOrderId","takerOrderId","turnover","executedAt","BtcRelayedTxInfo","blockHash","merkleProof","BtcHeaderIndex","hash","height","BtcTxState","txType","result","TrusteeInfoConfig","minTrusteeCount","maxTrusteeCount","GenericTrusteeSessionInfo","trusteeList","threshold","hotAddress","coldAddress","GenericTrusteeIntentionProps","about","hotEntity","coldEntity","WithdrawalRecord","assetId","applicant","addr","ext","ReferralId","AddrStr","ChainAddress","Price","OrderId","TradingPairId","PriceFluctuation","WithdrawalRecordId","Token","Decimals","Desc","TradingHistoryIndex","BtcTxType","BtcTxResult","AmountOf","AssetRestrictions","bits","Amount","CurrencyId","AssetRestriction","NetworkType","OrderProperty","side","submitter","orderType","createdAt","TotalAssetInfo","info","isOnline","restrictions","NominatorLedger","nomination","lastVoteWeight","lastVoteWeightUpdate","unbondedChunks","Unbonded","lockedUntil","WithdrawalLimit","minimalWithdrawal","fee","BtcTrusteeType","BtcTrusteeAddrInfo","redeemScript","BtcTrusteeIntentionProps","BtcTrusteeSessionInfo","BtcNetwork","BtcHeader","BtcTransaction","BtcPartialMerkleTree","BtcDepositCache","txid","BtcVoteResult","BtcWithdrawalProposal","sigState","withdrawalIdList","tx","BtcTxVerifier","RpcTotalAssetInfo","RpcOrder","remaining","executedIndices","alreadyFilled","reservedBalance","lastUpdateAt","RpcWithdrawalRecord","state","RpcMiningDividendInfo","own","other","insufficientStake","RpcInclusionFee","baseFee","lenFee","adjustedWeightFee","RpcFeeDetails","inclusionFee","tip","extraFee","finalFee","ValidatorInfo","registeredAt","isChilled","lastChilled","totalNomination","lastTotalVoteWeight","lastTotalVoteWeightUpdate","isValidating","selfBonded","referralId","rewardPotAccount","rewardPotBalance","FullPairInfo","baseCurrency","latestPrice","latestPriceUpdatedAt","maxValidBid","minValidAsk","quoteCurrency","MiningAssetInfo","miningPower","rewardPot","lastTotalMiningWeight","lastTotalMiningWeightUpdate","BtcHeaderInfo","BtcParams","maxBits","blockMaxFuture","targetTimespanSeconds","targetSpacingSeconds","retargetingFactor","retargetingInterval","minTimespan","maxTimespan","Depth","asks","bids","AssetLedger","ClaimRestriction","stakingRequirement","frequencyLimit","StakingRequirement","Page","pageIndex","pageSize","data","MinerLedger","lastMiningWeight","lastMiningWeightUpdate","lastClaim","TradingPairInfo","lastestPrice","lastUpdated","GlobalDistribution","treasury","mining","LockedType","MiningDistribution","asset","staking","BondRequirement","total","ValidatorLedger","ValidatorProfile","UnbondedIndex","String","MiningWeight","RpcPrice","RpcBalance","RpcMiningWeight","RpcVoteWeight","OrderInfo","HandicapInfo","WithdrawalRecordOf","FixedAssetPower","NoExtensionsStyle","NoExtensions","href","Bridge","lazy","History","LayoutWrapper","MaskStyle","App","setApi","setApiReady","issueRequests","setIssueRequests","redeemRequest","setReedemRequest","downExtensions","setExtensitions","exchangeRate","setExchangeRate","percent","setPercent","pcxPrice","setPcxPrice","bridgeStatus","setBridgeStatus","useEffect","Object","values","definitions","reduce","res","notification","warn","message","provider","WsProvider","ApiPromise","on","err","error","query","xGatewayBitcoinV2","entries","then","requestId","args","unwrap","redeemRequests","rpc","subscribeNewHeads","a","web3Enable","length","web3Accounts","meta","web3AccountsSubscribe","initial","tradingPrice","issueGriefingFee","JSON","stringify","mult","Math","pow","Provider","requests","fallback","path","component","React","use","LanguageDetector","initReactI18next","init","resources","zh","translation","zhTrans","fallbackLng","debug","interpolation","escapeValue","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.9df40f6a.chunk.js","sourcesContent":["import { AccountId } from \"@polkadot/types/interfaces\";\r\nimport { createModel } from \"hox\";\r\nimport { useState } from \"react\";\r\n\r\nexport interface AccountInfo {\r\n  name?: string;\r\n  address: string;\r\n}\r\n\r\nfunction useAccount() {\r\n  const [accounts, setAccounts] = useState<AccountInfo[]>([]);\r\n  const [currentAccount, setCurrentAccount] = useState<AccountInfo | null>();\r\n  return {\r\n    accounts,\r\n    setAccounts,\r\n    currentAccount,\r\n    setCurrentAccount,\r\n  };\r\n}\r\n\r\nexport default createModel(useAccount);\r\n","import { ApiPromise } from \"@polkadot/api\";\r\nimport { createContext, useContext } from \"react\";\r\n// import definitions from \"../interfaces\";\r\n\r\nexport interface ApiInfo {\r\n  api: ApiPromise;\r\n  isApiReady: boolean;\r\n}\r\n\r\n// const types = Object.values(definitions).reduce(\r\n//   (res, { types }) => ({ ...res, ...types }),\r\n//   {}\r\n// );\r\n\r\nexport const ApiContext = createContext(({} as unknown) as ApiInfo);\r\n\r\nexport const useApi = () => useContext(ApiContext);\r\n","import {decodeAddress, encodeAddress} from \"@polkadot/keyring\";\r\n\r\nexport function ChangeChainXAddress(address: string){\r\n   return encodeAddress(decodeAddress(address),44)\r\n}\r\n\r\nexport function convertBalanceToDisplayValue(balance:  undefined | number): number {\r\n   if (!balance) {\r\n     return 0;\r\n   } else if (typeof balance === \"number\") {\r\n     return balance / 100000000;\r\n   } else {\r\n     return balance / 100000000;\r\n   }\r\n }\r\n\r\n export default ChangeChainXAddress;","import {createContext, useContext, useState} from \"react\";\r\nimport { TradingPrice } from \"../interfaces/types\";\r\nimport type {Percent} from \"@polkadot/types/interfaces/runtime\";\r\ninterface FeeContextProps {\r\n  exchangeRate: TradingPrice;\r\n  percent: Percent;\r\n  pcxPrice: number\r\n}\r\n\r\nexport const FeeContext = createContext(({} as unknown) as FeeContextProps);\r\nexport const useFeeContext = () => useContext(FeeContext);","import { AccountId, Balance, BlockNumber } from \"@polkadot/types/interfaces\";\r\nimport { createContext, useContext } from \"react\";\r\nimport type { BtcAddress, IssueRequest, RequestId } from \"../interfaces\";\r\n\r\nexport interface IssueRequestRow {\r\n  readonly id: RequestId;\r\n  readonly vault: AccountId;\r\n  readonly openTime: BlockNumber;\r\n  readonly requester: AccountId;\r\n  readonly btcAddress: BtcAddress;\r\n  readonly btcAmount: Balance;\r\n  readonly griefingCollateral: Balance;\r\n}\r\n\r\ninterface IssueRequestsContextProps {\r\n  requests: IssueRequestRow[];\r\n}\r\n\r\nexport const IssueRequestsContext = createContext(\r\n  ({} as unknown) as IssueRequestsContextProps\r\n);\r\nexport const useIssueRequests = () => useContext(IssueRequestsContext);\r\n","import { AccountId, Balance, BlockNumber } from \"@polkadot/types/interfaces\";\r\nimport { createContext, useContext } from \"react\";\r\nimport type { BtcAddress, IssueRequest, RequestId } from \"../interfaces\";\r\n\r\nexport interface RedeemRequestRow {\r\n  readonly id: RequestId;\r\n  readonly vault: AccountId;\r\n  readonly openTime: BlockNumber;\r\n  readonly requester: AccountId;\r\n  readonly btcAddress: BtcAddress;\r\n  readonly amount: Balance;\r\n}\r\n\r\ninterface RedeemRequestsContextProps {\r\n  requests: RedeemRequestRow[];\r\n}\r\n\r\nexport const RedeemRequestsContext = createContext(\r\n  ({} as unknown) as RedeemRequestsContextProps\r\n);\r\nexport const useRedeemRequests = () => useContext(RedeemRequestsContext);\r\n","import styled from \"styled-components\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const SideBarStyle = styled.div`\r\n  background: #ffffff;\r\n  width: 210px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  main{\r\n    flex: 1;\r\n  }\r\n`\r\nexport const SideBarHeader =styled.header`\r\n    img{\r\n      width: 24px;\r\n      height: 24px;\r\n    }\r\n`\r\nexport const SideBarLogo = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 24px;\r\n  .project-name{\r\n    margin-left: 8px;\r\n    display: flex;\r\n    justify-content: center;\r\n    .x-name{\r\n      font-size: 30px;\r\n      font-weight: bold;\r\n    }\r\n    .bridge-name{\r\n      font-size: 30px;\r\n      margin-left: 8px;\r\n    }\r\n  }\r\n`\r\nexport const SideBarStatus = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 7px;\r\n  .status{\r\n    width: 10px;\r\n    height: 10px;\r\n    border-radius: 50%;\r\n    &.running{\r\n      background: #34C69A;\r\n    }\r\n    &.error{\r\n      background: red;\r\n    }\r\n  }\r\n  .status-info{\r\n    font-size: 10px;\r\n    color: #8E8E8E;\r\n    margin-left: 4px;\r\n  }\r\n`\r\nexport const LinkStyle = styled(NavLink)`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 48px;\r\n  width: 200px;\r\n  border-radius: 6px 0 0 6px;\r\n  margin-top: 90px;\r\n  font-size: 16px;\r\n  color: #3D3D3D;\r\n  font-weight: bold;\r\n  img{\r\n    width: 18px;\r\n    height: 18px;\r\n    position: absolute;\r\n    margin-right: 140px;\r\n  }\r\n  &:hover{\r\n    color: #3D3D3D;\r\n  }\r\n  &.active{\r\n    background: #F6C94A;\r\n  }\r\n`\r\nexport const SideBarFooter = styled.footer`\r\n  margin-bottom: 40px;\r\n  .bridge-doc{\r\n    display: flex;\r\n    width: 120px;\r\n    justify-content: space-around;\r\n    font-size: 12px;\r\n    color: #8E8E8E;\r\n    .point{\r\n      font-weight: bold;\r\n    }\r\n    li{\r\n      margin-left: 5px;\r\n    }\r\n  }\r\n  .social-media{\r\n    margin-top: 19px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    img{\r\n      width: 16px;\r\n      height: 16px;\r\n    }\r\n  }\r\n  .language-select{\r\n    display: flex;\r\n    font-size: 12px;\r\n    color: #8E8E8E;\r\n    justify-content: space-around;\r\n    margin-top: 35px;\r\n    li{\r\n      cursor:pointer;\r\n      &.active{\r\n        color: #282828;\r\n      }\r\n    }\r\n  }\r\n`\r\n","export default __webpack_public_path__ + \"static/media/ChainX_logo.5a3285e8.svg\";","export default __webpack_public_path__ + \"static/media/bridge.88e59e8e.svg\";","export default __webpack_public_path__ + \"static/media/history.a92a7c01.svg\";","export default __webpack_public_path__ + \"static/media/asset.636a2efe.svg\";","export default __webpack_public_path__ + \"static/media/github.d8f1cc55.svg\";","export default __webpack_public_path__ + \"static/media/twitter.6a86d99b.svg\";","export default __webpack_public_path__ + \"static/media/telegram.b12b8853.svg\";","import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  LinkStyle,\r\n  SideBarFooter,\r\n  SideBarHeader,\r\n  SideBarLogo,\r\n  SideBarStatus,\r\n  SideBarStyle,\r\n} from \"./style\";\r\nimport logo from \"./icons/ChainX_logo.svg\";\r\nimport bridgeLogo from \"./icons/bridge.svg\";\r\nimport historyLogo from \"./icons/history.svg\";\r\nimport vaultLogo from \"./icons/asset.svg\";\r\nimport githubLogo from \"./icons/github.svg\";\r\nimport twitterLogo from \"./icons/twitter.svg\";\r\nimport telegramLogo from \"./icons/telegram.svg\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useApi } from \"../../hooks/useApi\";\r\nimport { Tooltip } from \"antd\";\r\nimport { Status } from \"../../interfaces\";\r\nimport { bridgeStatusContext } from \"../../App\";\r\nfunction SideBar() {\r\n  let [systemStatus, setSystemStatus] = useState(\"\");\r\n  let [statusInfo, setStatusInfo] = useState(\"\");\r\n  const { api, isApiReady } = useApi();\r\n  const { t, i18n } = useTranslation();\r\n  const value = useContext(bridgeStatusContext)\r\n  return (\r\n    <SideBarStyle>\r\n      <SideBarHeader>\r\n        <SideBarLogo>\r\n          <img src={logo} alt=\"\" />\r\n          <div className={\"project-name\"}>\r\n            <div className={\"x-name\"}>X</div>\r\n            <div className={\"bridge-name\"}>Bridge</div>\r\n          </div>\r\n        </SideBarLogo>\r\n        <SideBarStatus>\r\n          <div\r\n            className={\r\n              value === \"Running\" ? \"status running\" : \"status error\"\r\n            }\r\n          />\r\n          <Tooltip title={value} placement=\"right\">\r\n            <div className={\"status-info\"}>\r\n              {value === \"Running\" ? t(`${value}`) : t(\"Error\")}\r\n            </div>\r\n          </Tooltip>\r\n        </SideBarStatus>\r\n      </SideBarHeader>\r\n      <main>\r\n        <nav>\r\n          <LinkStyle to={\"/\"} exact activeClassName={\"active\"}>\r\n            <img src={bridgeLogo} alt=\"\" />\r\n            <div>{t(\"Bridge\")}</div>\r\n          </LinkStyle>\r\n          <LinkStyle to={\"/history\"} activeClassName={\"active\"}>\r\n            <img src={historyLogo} alt=\"\" />\r\n            <div>{t(\"History\")}</div>\r\n          </LinkStyle>\r\n          <LinkStyle to={\"/vault\"} activeClassName={\"active\"}>\r\n            <img src={vaultLogo} alt=\"\" />\r\n            <div>{t(\"Vault\")}</div>\r\n          </LinkStyle>\r\n        </nav>\r\n      </main>\r\n      <SideBarFooter>\r\n        <ul className={\"bridge-doc\"}>\r\n          <li>{t(\"Documentation\")}</li>\r\n          <li className={\"point\"}>·</li>\r\n          <li>FAQ</li>\r\n          <li className={\"point\"}>·</li>\r\n          <li>Wiki</li>\r\n        </ul>\r\n        <ul className={\"social-media\"}>\r\n          <li>\r\n            <img src={githubLogo} alt=\"\" />\r\n          </li>\r\n          <li>\r\n            <img src={twitterLogo} alt=\"\" />\r\n          </li>\r\n          <li>\r\n            <img src={telegramLogo} alt=\"\" />\r\n          </li>\r\n        </ul>\r\n        <ul className={\"language-select\"}>\r\n          <li\r\n            className={i18n.language == \"zh\" ? \"active\" : \"\"}\r\n            onClick={() => i18n.changeLanguage((i18n.language = \"zh\"))}\r\n          >\r\n            中文\r\n          </li>\r\n          <li>/</li>\r\n          <li\r\n            className={i18n.language == \"en\" ? \"active\" : \"\"}\r\n            onClick={() => i18n.changeLanguage((i18n.language = \"en\"))}\r\n          >\r\n            English\r\n          </li>\r\n        </ul>\r\n      </SideBarFooter>\r\n    </SideBarStyle>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","import styled from \"styled-components\";\n\nexport const HeaderStyle = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  background: #fff;\n  height: 60px;\n`\n","import styled from \"styled-components\";\r\n\r\nexport const SelectAccountStyle = styled.div`\r\n  margin-right: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  .current-account{\r\n    font-size: 14px;\r\n    color: #282828;\r\n    font-weight: bold;\r\n    margin-right: 10px;\r\n  }\r\n  .balance{\r\n    font-size: 14px;\r\n    color: #282828;\r\n    font-weight: bold;\r\n    margin-right: 10px;\r\n  }\r\n  .ant-radio-group {\r\n    display: flex ;\r\n    flex-direction: column ;\r\n    .account-info{\r\n      margin-top: 15px;\r\n      width: 400px;\r\n      display: flex;\r\n      justify-content: space-between;\r\n    }\r\n  }\r\n`\r\n","export default __webpack_public_path__ + \"static/media/Account Settings.655cf869.svg\";","import React, { useState } from \"react\";\r\nimport { SelectAccountStyle } from \"./style\";\r\nimport buttonLogo from \"./icons/Account Settings.svg\";\r\nimport { Modal, Radio } from \"antd\";\r\nimport useAccountModel from \"../../../hooks/useAccountModel\";\r\nimport { useAccountInfo } from \"../../../hooks/useAccountInfo\";\r\nimport {useApi} from \"../../../hooks/useApi\"\r\nfunction SelectAccount() {\r\n  const accountModel = useAccountModel();\r\n  const [AccountListModal, SetAccountListModal] = useState(false);\r\n  const { currentAccount } = useAccountModel();\r\n  const { accounts } = useAccountModel();\r\n  const [value, setValue] = useState(currentAccount);\r\n  const currentAddress = currentAccount?.address;\r\n  return (\r\n    <SelectAccountStyle>\r\n      <div className={\"current-account\"}>{currentAccount?.name}</div>\r\n      <img src={buttonLogo} alt=\"\" onClick={() => SetAccountListModal(true)} />\r\n      <Modal\r\n        title={\"请选择账号\"}\r\n        visible={AccountListModal}\r\n        onCancel={() => SetAccountListModal(false)}\r\n        getContainer={false}\r\n        footer={null}\r\n      >\r\n        <Radio.Group\r\n          onChange={(e) => {\r\n            setValue(e.target.value);\r\n            const changeAccount = accounts.filter(\r\n              (item) => item.address === e.target.value?.toString()\r\n            );\r\n            accountModel.setCurrentAccount({\r\n              name: changeAccount[0].name,\r\n              address: changeAccount[0].address,\r\n            });\r\n          }}\r\n          value={value}\r\n          defaultValue={currentAddress}\r\n        >\r\n          {accounts.map((account) => (\r\n            <Radio value={account.address} key={account.address}>\r\n              <div style={{display:\"flex\",justifyContent:\"space-between\",width:\"450px\"}}>\r\n                <div>{account.name}</div>\r\n        \r\n              </div>\r\n            </Radio>\r\n          ))}\r\n        </Radio.Group>\r\n      </Modal>\r\n    </SelectAccountStyle>\r\n  );\r\n}\r\n\r\nexport default SelectAccount;\r\n","import React from \"react\";\nimport {HeaderStyle} from \"./style\";\nimport SelectAccount from \"./SelectAccount\";\nfunction Header(){\n    return (\n        <HeaderStyle>\n            <SelectAccount/>\n        </HeaderStyle>\n    )\n}\nexport default Header;\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 24,color:\"#F6C94A\" }} spin />\r\nconst LoadingStyle = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n`\r\nfunction Loading(){\r\n    return(\r\n        <LoadingStyle>\r\n            <Spin indicator={antIcon} size={\"large\"}/>\r\n        </LoadingStyle>\r\n    )\r\n}\r\nexport default Loading;\r\n","export default {\r\n  types: {\r\n    CurrencyIdOf: \"u32\",\r\n    BtcAddress: \"Text\",\r\n\r\n    PerDispatchClass: {\r\n      normal: \"WeightPerClass\",\r\n      operational: \"WeightPerClass\",\r\n      mandatory: \"WeightPerClass\",\r\n    },\r\n    RequestId: \"u128\",\r\n    BlockNumberFor: \"BlockNumber\",\r\n    Vault: {\r\n      id: \"AccountId\",\r\n      toBeIssuedTokens: \"Balance\",\r\n      issuedTokens: \"Balance\",\r\n      toBeRedeemedTokens: \"Balance\",\r\n      wallet: \"BtcAddress\",\r\n      bannedUntil: \"BlockNumber\",\r\n      status: \"VaultStatus\",\r\n    },\r\n    SystemVault: {\r\n      id: \"AccountId\",\r\n      toBeIssuedTokens: \"Balance\",\r\n      issuedTokens: \"Balance\",\r\n      toBeRedeemedTokens: \"Balance\",\r\n    },\r\n    VaultStatus: {\r\n      _enum: [\"Active\", \"Liquidated\", \"CommittedTheft\"],\r\n    },\r\n    TradingPrice: {\r\n      price: \"u128\",\r\n      decimal: \"u8\",\r\n    },\r\n    IssueRequest: {\r\n      vault: \"AccountId\",\r\n      openTime: \"BlockNumber\",\r\n      requester: \"AccountId\",\r\n      btcAddress: \"BtcAddress\",\r\n      btcAmount: \"Balance\",\r\n      griefingCollateral: \"Balance\",\r\n    },\r\n    RpcVaultInfo: {\r\n      account: \"AccountId\",\r\n      btcAddr: \"BtcAddress\",\r\n    },\r\n    RedeemRequest: {\r\n      vault: \"AccountId\",\r\n      openTime: \"BlockNumber\",\r\n      requester: \"AccountId\",\r\n      btcAddress: \"BtcAddress\",\r\n      amount: \"Balance\",\r\n      redeemFee: \"Balance\",\r\n      reimburse: \"bool\",\r\n    },\r\n    Status: {\r\n      _enum: {\r\n        Running: null,\r\n        Error: \"ErrorCode\",\r\n        Shutdown: null,\r\n      },\r\n    },\r\n    ErrorCode: {\r\n      _enum: [\r\n        \"Liquidating\",\r\n        \"Liquidating_ExchangeRateExpired\",\r\n        \"ExchangeRateExpired\",\r\n      ],\r\n    },\r\n  },\r\n};\r\n","export default {\r\n  // rpc: {\r\n  //   xassets: {\r\n  //     getAssetsByAccount: {\r\n  //       description:\r\n  //         \"Return all assets with AssetTypes for an account (exclude native token(PCX)). The returned map would not contains the assets which is not existed for this account but existed in valid assets list.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"BTreeMap<AssetId, BTreeMap<AssetType, RpcBalance<Balance>>>\",\r\n  //     },\r\n  //     getAssets: {\r\n  //       description: \"get all assets balance and infos\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"BTreeMap<AssetId, RpcTotalAssetInfo>\",\r\n  //     },\r\n  //   },\r\n  //   xspot: {\r\n  //     getTradingPairs: {\r\n  //       description: \"Get the overall info of all trading pairs.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"Vec<FullPairInfo<RpcPrice<Price>, BlockNumber>>\",\r\n  //     },\r\n  //     getOrdersByAccount: {\r\n  //       description: \"Get the orders of an account.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"page_index\",\r\n  //           type: \"u32\",\r\n  //         },\r\n  //         {\r\n  //           name: \"page_size\",\r\n  //           type: \"u32\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type:\r\n  //         \"Page<Vec<RpcOrder<TradingPairId,AccountId,RpcBalance<Balance>,RpcPrice<Price>,BlockNumber>>>\",\r\n  //     },\r\n  //     getDepth: {\r\n  //       description: \"Get the depth of a trading pair.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"pair_id\",\r\n  //           type: \"TradingPairId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"depth_size\",\r\n  //           type: \"u32\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"Option<Depth<RpcPrice<Price>, RpcBalance<Balance>>>\",\r\n  //     },\r\n  //   },\r\n  //   xgatewaycommon: {\r\n  //     boundAddrs: {\r\n  //       description: \"Get bound addrs for an accountid\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"BTreeMap<Chain, Vec<String>>\",\r\n  //     },\r\n  //     withdrawalLimit: {\r\n  //       description:\r\n  //         \"Get withdrawal limit(minimal_withdrawal&fee) for an AssetId\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"asset_id\",\r\n  //           type: \"AssetId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"WithdrawalLimit<RpcBalance<Balance>>\",\r\n  //     },\r\n  //     verifyWithdrawal: {\r\n  //       description:\r\n  //         \"Use the params to verify whether the withdrawal apply is valid. Notice those params is same as the params for call `XGatewayCommon::withdraw(...)`, including checking address is valid or something else. Front-end should use this rpc to check params first, than could create the extrinsic.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"asset_id\",\r\n  //           type: \"AssetId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"value\",\r\n  //           type: \"u64\",\r\n  //         },\r\n  //         {\r\n  //           name: \"addr\",\r\n  //           type: \"String\",\r\n  //         },\r\n  //         {\r\n  //           name: \"memo\",\r\n  //           type: \"String\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"bool\",\r\n  //     },\r\n  //     trusteeMultisigs: {\r\n  //       description: \"Return the trustee multisig address for all chain.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Option<BlockHash>)\",\r\n  //         },\r\n  //       ],\r\n  //       type: \"BTreeMap<Chain, AccountId>\",\r\n  //     },\r\n  //     bitcoinTrusteeProperties: {\r\n  //       description:\r\n  //         \"Return bitcoin trustee registered property info for an account(e.g. registered hot/cold address)\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"BtcTrusteeIntentionProps\",\r\n  //     },\r\n  //     bitcoinTrusteeSessionInfo: {\r\n  //       description:\r\n  //         \"Return bitcoin trustee for current session(e.g. trustee hot/cold address and else)\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"BtcTrusteeSessionInfo<AccountId>\",\r\n  //     },\r\n  //     bitcoinGenerateTrusteeSessionInfo: {\r\n  //       description:\r\n  //         \"Try to generate bitcoin trustee info for a list of candidates. (this api is used to check the trustee info which would be generated by those candidates)\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"candidates\",\r\n  //           type: \"Vec<AccountId>\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"BtcTrusteeSessionInfo<AccountId>\",\r\n  //     },\r\n  //   },\r\n  //   xgatewayrecords: {\r\n  //     withdrawalList: {\r\n  //       description:\r\n  //         \"Return current withdraw list(include Applying and Processing withdraw state)\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type:\r\n  //         \"BTreeMap<WithdrawalRecordId, RpcWithdrawalRecord<AccountId, Balance, BlockNumber>>\",\r\n  //     },\r\n  //     withdrawalListByChain: {\r\n  //       description:\r\n  //         \"Return current withdraw list for a chain(include Applying and Processing withdraw state)\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"chain\",\r\n  //           type: \"Chain\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type:\r\n  //         \"BTreeMap<WithdrawalRecordId, RpcWithdrawalRecord<AccountId, Balance, BlockNumber>>\",\r\n  //     },\r\n  //     pendingWithdrawalListByChain: {\r\n  //       description: \"Return current pending withdraw list for a chain\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"chain\",\r\n  //           type: \"Chain\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type:\r\n  //         \"BTreeMap<WithdrawalRecordId, RpcWithdrawalRecord<AccountId, Balance, BlockNumber>>\",\r\n  //     },\r\n  //   },\r\n  //   xminingasset: {\r\n  //     getMiningAssets: {\r\n  //       description: \"Get overall information about all mining assets.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type:\r\n  //         \"Vec<MiningAssetInfo<AccountId,RpcBalance<Balance>,RpcMiningWeight<MiningWeight>,BlockNumber>>\",\r\n  //     },\r\n  //     getDividendByAccount: {\r\n  //       description:\r\n  //         \"Get the asset mining dividends info given the asset miner AccountId.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"BTreeMap<AssetId, RpcMiningDividendInfo>\",\r\n  //     },\r\n  //     getMinerLedgerByAccount: {\r\n  //       description:\r\n  //         \"Get the mining ledger details given the asset miner AccountId.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type:\r\n  //         \"BTreeMap<AssetId, MinerLedger<RpcMiningWeight<MiningWeight>, BlockNumber>>\",\r\n  //     },\r\n  //   },\r\n  //   xstaking: {\r\n  //     getValidators: {\r\n  //       description: \"Get overall information about all potential validators\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type:\r\n  //         \"Vec<ValidatorInfo<AccountId, RpcBalance<Balance>, RpcVoteWeight<VoteWeight>, BlockNumber>>\",\r\n  //     },\r\n  //     getValidatorByAccount: {\r\n  //       description: \"Get overall information given the validator AccountId.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type:\r\n  //         \"ValidatorInfo<AccountId, RpcBalance<Balance>, RpcVoteWeight<VoteWeight>, BlockNumber>\",\r\n  //     },\r\n  //     getDividendByAccount: {\r\n  //       description:\r\n  //         \"Get the staking dividends info given the staker AccountId.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"BTreeMap<AccountId, RpcBalance<Balance>>\",\r\n  //     },\r\n  //     getNominationByAccount: {\r\n  //       description: \"Get the nomination details given the staker AccountId.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type:\r\n  //         \"BTreeMap<AccountId,NominatorLedger<RpcBalance<Balance>, RpcVoteWeight<VoteWeight>, BlockNumber>>\",\r\n  //     },\r\n  //     getNominatorByAccount: {\r\n  //       description:\r\n  //         \"Get individual nominator information given the nominator AccountId.\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"who\",\r\n  //           type: \"AccountId\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Hash\",\r\n  //           isOptional: true,\r\n  //         },\r\n  //       ],\r\n  //       type: \"NominatorInfo<BlockNumber>\",\r\n  //     },\r\n  //   },\r\n  //   xfee: {\r\n  //     queryDetails: {\r\n  //       description: \"get the fee details of extrinsic\",\r\n  //       params: [\r\n  //         {\r\n  //           name: \"encoded_xt\",\r\n  //           type: \"Bytes\",\r\n  //         },\r\n  //         {\r\n  //           name: \"at\",\r\n  //           type: \"Option<BlockHash>\",\r\n  //         },\r\n  //       ],\r\n  //       type: \"RpcFeeDetails\",\r\n  //     },\r\n  //   },\r\n  // },\r\n  types: {\r\n    OrderStatus: {\r\n      _enum: [\r\n        \"Created\",\r\n        \"PartialFill\",\r\n        \"Filled\",\r\n        \"PartialFillAndCanceled\",\r\n        \"Canceled\",\r\n      ],\r\n    },\r\n    Chain: {\r\n      _enum: [\"ChainX\", \"Bitcoin\", \"Ethereum\", \"Polkadot\"],\r\n    },\r\n    AssetType: {\r\n      _enum: [\r\n        \"Usable\",\r\n        \"Locked\",\r\n        \"Reserved\",\r\n        \"ReservedWithdrawal\",\r\n        \"ReservedDexSpot\",\r\n      ],\r\n    },\r\n    OrderType: {\r\n      _enum: [\"Limit\", \"Market\"],\r\n    },\r\n    Side: {\r\n      _enum: [\"Buy\", \"Sell\"],\r\n    },\r\n    WithdrawalState: {\r\n      _enum: [\r\n        \"Applying\",\r\n        \"Processing\",\r\n        \"NormalFinish\",\r\n        \"RootFinish\",\r\n        \"NormalCancel\",\r\n        \"RootCancel\",\r\n      ],\r\n    },\r\n    Memo: \"Text\",\r\n    AssetInfo: {\r\n      token: \"String\",\r\n      tokenName: \"String\",\r\n      chain: \"Chain\",\r\n      decimals: \"Decimals\",\r\n      desc: \"String\",\r\n    },\r\n    Handicap: {\r\n      highestBid: \"Price\",\r\n      lowestAsk: \"Price\",\r\n    },\r\n    CurrencyPair: {\r\n      base: \"AssetId\",\r\n      quote: \"AssetId\",\r\n    },\r\n    TradingPairProfile: {\r\n      id: \"TradingPairId\",\r\n      currencyPair: \"CurrencyPair\",\r\n      pipDecimals: \"u32\",\r\n      tickDecimals: \"u32\",\r\n      tradable: \"bool\",\r\n    },\r\n    OrderExecutedInfo: {\r\n      tradingHistoryIdx: \"TradingHistoryIndex\",\r\n      pairId: \"TradingPairId\",\r\n      price: \"Price\",\r\n      maker: \"AccountId\",\r\n      taker: \"AccountId\",\r\n      makerOrderId: \"OrderId\",\r\n      takerOrderId: \"OrderId\",\r\n      turnover: \"Balance\",\r\n      executedAt: \"BlockNumber\",\r\n    },\r\n    BtcRelayedTxInfo: {\r\n      blockHash: \"H256\",\r\n      merkleProof: \"BtcPartialMerkleTree\",\r\n    },\r\n    BtcHeaderIndex: {\r\n      hash: \"H256\",\r\n      height: \"u32\",\r\n    },\r\n    BtcTxState: {\r\n      txType: \"BtcTxType\",\r\n      result: \"BtcTxResult\",\r\n    },\r\n    TrusteeInfoConfig: {\r\n      minTrusteeCount: \"u32\",\r\n      maxTrusteeCount: \"u32\",\r\n    },\r\n    GenericTrusteeSessionInfo: {\r\n      trusteeList: \"Vec<AccountId>\",\r\n      threshold: \"u16\",\r\n      hotAddress: \"Vec<u8>\",\r\n      coldAddress: \"Vec<u8>\",\r\n    },\r\n    GenericTrusteeIntentionProps: {\r\n      about: \"Text\",\r\n      hotEntity: \"Vec<u8>\",\r\n      coldEntity: \"Vec<u8>\",\r\n    },\r\n    WithdrawalRecord: {\r\n      assetId: \"AssetId\",\r\n      applicant: \"AccountId\",\r\n      balance: \"Balance\",\r\n      addr: \"AddrStr\",\r\n      ext: \"Memo\",\r\n      height: \"BlockNumber\",\r\n    },\r\n    ReferralId: \"Text\",\r\n    AddrStr: \"Text\",\r\n    ChainAddress: \"Vec<u8>\",\r\n    Price: \"u128\",\r\n    OrderId: \"u64\",\r\n    TradingPairId: \"u32\",\r\n    PriceFluctuation: \"u32\",\r\n    WithdrawalRecordId: \"u32\",\r\n    Token: \"Text\",\r\n    Decimals: \"u8\",\r\n    Desc: \"Text\",\r\n    TradingHistoryIndex: \"u64\",\r\n    BtcTxType: {\r\n      _enum: [\r\n        \"Withdrawal\",\r\n        \"Deposit\",\r\n        \"HotAndCold\",\r\n        \"TrusteeTransition\",\r\n        \"Irrelevance\",\r\n      ],\r\n    },\r\n    BtcTxResult: {\r\n      _enum: [\"Success\", \"Failure\"],\r\n    },\r\n    AmountOf: \"Amount\",\r\n    AssetRestrictions: {\r\n      bits: \"u32\",\r\n    },\r\n    Amount: \"i128\",\r\n    CurrencyId: \"AssetId\",\r\n    AssetRestriction: {\r\n      _enum: [\r\n        \"Move\",\r\n        \"Transfer\",\r\n        \"Deposit\",\r\n        \"Withdraw\",\r\n        \"DestroyWithdrawal\",\r\n        \"DestroyFree\",\r\n      ],\r\n    },\r\n    NetworkType: {\r\n      _enum: [\"Mainnet\", \"Testnet\"],\r\n    },\r\n    OrderProperty: {\r\n      id: \"OrderId\",\r\n      side: \"Side\",\r\n      price: \"Price\",\r\n      amount: \"Amount\",\r\n      pairId: \"TradingPairId\",\r\n      submitter: \"AccountId\",\r\n      orderType: \"OrderType\",\r\n      createdAt: \"BlockNumber\",\r\n    },\r\n    TotalAssetInfo: {\r\n      info: \"AssetInfo\",\r\n      balance: \"BTreeMap<AssetType, Balance>\",\r\n      isOnline: \"bool\",\r\n      restrictions: \"AssetRestrictions\",\r\n    },\r\n    NominatorLedger: {\r\n      nomination: \"Balance\",\r\n      lastVoteWeight: \"VoteWeight\",\r\n      lastVoteWeightUpdate: \"BlockNumber\",\r\n      unbondedChunks: \"Vec<Unbonded>\",\r\n    },\r\n    Unbonded: {\r\n      value: \"Balance\",\r\n      lockedUntil: \"BlockNumber\",\r\n    },\r\n    WithdrawalLimit: {\r\n      minimalWithdrawal: \"Balance\",\r\n      fee: \"Balance\",\r\n    },\r\n    BtcTrusteeType: \"Vec<u8>\",\r\n    BtcTrusteeAddrInfo: {\r\n      addr: \"BtcAddress\",\r\n      redeemScript: \"Vec<u8>\",\r\n    },\r\n    BtcTrusteeIntentionProps: {\r\n      about: \"Text\",\r\n      hotEntity: \"BtcTrusteeType\",\r\n      coldEntity: \"BtcTrusteeType\",\r\n    },\r\n    BtcTrusteeSessionInfo: {\r\n      trusteeList: \"Vec<AccountId>\",\r\n      threshold: \"u16\",\r\n      hotAddress: \"BtcTrusteeAddrInfo\",\r\n      coldAddress: \"BtcTrusteeAddrInfo\",\r\n    },\r\n    BtcNetwork: {\r\n      _enum: [\"Mainnet\", \"Testnet\"],\r\n    },\r\n    BtcHeader: \"Vec<u8>\",\r\n    BtcTransaction: \"Vec<u8>\",\r\n    BtcPartialMerkleTree: \"Vec<u8>\",\r\n    BtcDepositCache: {\r\n      txid: \"H256\",\r\n      balance: \"u64\",\r\n    },\r\n    BtcVoteResult: {\r\n      _enum: [\"Unfinish\", \"Finish\"],\r\n    },\r\n    BtcWithdrawalProposal: {\r\n      sigState: \"BtcVoteResult\",\r\n      withdrawalIdList: \"Vec<u32>\",\r\n      tx: \"BtcTransaction\",\r\n      trusteeList: \"Vec<(AccountId, bool)>\",\r\n    },\r\n    BtcTxVerifier: {\r\n      _enum: [\"Recover\", \"RuntimeInterface\"],\r\n    },\r\n    RpcTotalAssetInfo: {\r\n      info: \"AssetInfo\",\r\n      balance: \"BTreeMap<AssetType, RpcBalance>\",\r\n      isOnline: \"bool\",\r\n      restrictions: \"AssetRestrictions\",\r\n    },\r\n    RpcOrder: {\r\n      id: \"OrderId\",\r\n      side: \"Side\",\r\n      price: \"RpcPrice\",\r\n      amount: \"RpcBalance\",\r\n      pairId: \"TradingPairId\",\r\n      submitter: \"AccountId\",\r\n      orderType: \"OrderType\",\r\n      createdAt: \"BlockNumber\",\r\n      status: \"OrderStatus\",\r\n      remaining: \"RpcBalance\",\r\n      executedIndices: \"Vec<TradingHistoryIndex>\",\r\n      alreadyFilled: \"RpcBalance\",\r\n      reservedBalance: \"RpcBalance\",\r\n      lastUpdateAt: \"BlockNumber\",\r\n    },\r\n    RpcWithdrawalRecord: {\r\n      assetId: \"AssetId\",\r\n      applicant: \"AccountId\",\r\n      balance: \"RpcBalance\",\r\n      addr: \"String\",\r\n      ext: \"String\",\r\n      height: \"BlockNumber\",\r\n      state: \"WithdrawalState\",\r\n    },\r\n    RpcMiningDividendInfo: {\r\n      own: \"RpcBalance\",\r\n      other: \"RpcBalance\",\r\n      insufficientStake: \"RpcBalance\",\r\n    },\r\n    RpcInclusionFee: {\r\n      baseFee: \"RpcBalance\",\r\n      lenFee: \"RpcBalance\",\r\n      adjustedWeightFee: \"RpcBalance\",\r\n    },\r\n    RpcFeeDetails: {\r\n      inclusionFee: \"Option<RpcInclusionFee>\",\r\n      tip: \"RpcBalance\",\r\n      extraFee: \"RpcBalance\",\r\n      finalFee: \"RpcBalance\",\r\n    },\r\n    ValidatorInfo: {\r\n      account: \"AccountId\",\r\n      registeredAt: \"BlockNumber\",\r\n      isChilled: \"bool\",\r\n      lastChilled: \"Option<BlockNumber>\",\r\n      totalNomination: \"RpcBalance\",\r\n      lastTotalVoteWeight: \"RpcVoteWeight\",\r\n      lastTotalVoteWeightUpdate: \"BlockNumber\",\r\n      isValidating: \"bool\",\r\n      selfBonded: \"RpcBalance\",\r\n      referralId: \"String\",\r\n      rewardPotAccount: \"AccountId\",\r\n      rewardPotBalance: \"RpcBalance\",\r\n    },\r\n    FullPairInfo: {\r\n      baseCurrency: \"AssetId\",\r\n      highestBid: \"RpcPrice\",\r\n      id: \"TradingPairId\",\r\n      latestPrice: \"RpcPrice\",\r\n      latestPriceUpdatedAt: \"BlockNumber\",\r\n      lowestAsk: \"RpcPrice\",\r\n      maxValidBid: \"RpcPrice\",\r\n      minValidAsk: \"RpcPrice\",\r\n      pipDecimals: \"u32\",\r\n      quoteCurrency: \"AssetId\",\r\n      tickDecimals: \"u32\",\r\n      tradable: \"bool\",\r\n    },\r\n    MiningAssetInfo: {\r\n      assetId: \"AssetId\",\r\n      miningPower: \"FixedAssetPower\",\r\n      rewardPot: \"AccountId\",\r\n      rewardPotBalance: \"RpcBalance\",\r\n      lastTotalMiningWeight: \"RpcMiningWeight\",\r\n      lastTotalMiningWeightUpdate: \"BlockNumber\",\r\n    },\r\n    BtcHeaderInfo: {\r\n      header: \"BtcHeader\",\r\n      height: \"u32\",\r\n    },\r\n    BtcParams: {\r\n      maxBits: \"u32\",\r\n      blockMaxFuture: \"u32\",\r\n      targetTimespanSeconds: \"u32\",\r\n      targetSpacingSeconds: \"u32\",\r\n      retargetingFactor: \"u32\",\r\n      retargetingInterval: \"u32\",\r\n      minTimespan: \"u32\",\r\n      maxTimespan: \"u32\",\r\n    },\r\n    Depth: {\r\n      asks: \"Vec<(RpcPrice, RpcBalance)>\",\r\n      bids: \"Vec<(RpcPrice, RpcBalance)>\",\r\n    },\r\n    AssetLedger: {\r\n      lastTotalMiningWeight: \"MiningWeight\",\r\n      lastTotalMiningWeightUpdate: \"BlockNumber\",\r\n    },\r\n    ClaimRestriction: {\r\n      stakingRequirement: \"StakingRequirement\",\r\n      frequencyLimit: \"BlockNumber\",\r\n    },\r\n    StakingRequirement: \"u32\",\r\n    Page: {\r\n      pageIndex: \"u32\",\r\n      pageSize: \"u32\",\r\n      data: \"Vec<RpcOrder>\",\r\n    },\r\n    MinerLedger: {\r\n      lastMiningWeight: \"MiningWeight\",\r\n      lastMiningWeightUpdate: \"BlockNumber\",\r\n      lastClaim: \"Option<BlockNumber>\",\r\n    },\r\n    TradingPairInfo: {\r\n      lastestPrice: \"Price\",\r\n      lastUpdated: \"BlockNumber\",\r\n    },\r\n    GlobalDistribution: {\r\n      treasury: \"u32\",\r\n      mining: \"u32\",\r\n    },\r\n    LockedType: {\r\n      _enum: [\"Bonded\", \"BondedWithdrawal\"],\r\n    },\r\n    MiningDistribution: {\r\n      asset: \"u32\",\r\n      staking: \"u32\",\r\n    },\r\n    BondRequirement: {\r\n      selfBonded: \"Balance\",\r\n      total: \"Balance\",\r\n    },\r\n    ValidatorLedger: {\r\n      totalNomination: \"Balance\",\r\n      lastTotalVoteWeight: \"VoteWeight\",\r\n      lastTotalVoteWeightUpdate: \"BlockNumber\",\r\n    },\r\n    ValidatorProfile: {\r\n      registeredAt: \"BlockNumber\",\r\n      isChilled: \"bool\",\r\n      lastChilled: \"Option<BlockNumber>\",\r\n      referralId: \"ReferralId\",\r\n    },\r\n    UnbondedIndex: \"u32\",\r\n    String: \"Text\",\r\n    MiningWeight: \"u128\",\r\n    RpcPrice: \"String\",\r\n    RpcBalance: \"String\",\r\n    RpcMiningWeight: \"String\",\r\n    RpcVoteWeight: \"String\",\r\n    OrderInfo: \"Order\",\r\n    HandicapInfo: \"Handicap\",\r\n    WithdrawalRecordOf: \"WithdrawalRecord\",\r\n    FixedAssetPower: \"u32\",\r\n  },\r\n};\r\n","export default __webpack_public_path__ + \"static/media/logo.9aaaddc6.svg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport logo from \"./icons/logo.svg\"\r\nconst NoExtensionsStyle = styled.div`\r\n  display: flex;\r\n  flex-direction:column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  .tip{\r\n      width:360px;\r\n      height:56px;\r\n      background:#fff;\r\n      border-radius:36.5px;\r\n      display:flex;\r\n      justify-content:center;\r\n      align-items:center;\r\n  }\r\n  .info{\r\n      margin-top: 20px;\r\n      color:#fff\r\n  }\r\n`\r\nfunction NoExtensions(){\r\n    return(\r\n        <NoExtensionsStyle>\r\n            <div className={\"tip\"}>\r\n                <a href=\"https://polkadot.js.org/extension/\" target={'_blank'}>\r\n                <img src={logo} alt=\"\"/>\r\n                </a>\r\n            </div>\r\n            <div className=\"info\">请使用 PolkadotJS 插件登陆</div>\r\n        </NoExtensionsStyle>\r\n    )\r\n}\r\nexport default NoExtensions;\r\n","import React, { lazy, Suspense, useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./App.css\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport SideBar from \"./components/SideBar\";\r\nimport Header from \"./components/Header\";\r\nimport Loading from \"./components/Loading\";\r\nimport styled from \"styled-components\";\r\nimport { ApiPromise, WsProvider } from \"@polkadot/api\";\r\nimport { ApiContext} from \"./hooks/useApi\";\r\nimport * as definitions from \"./interfaces/definitions\";\r\nimport { notification } from \"antd\";\r\nimport useAccountModel from \"./hooks/useAccountModel\";\r\nimport ChangeChainXAddress from \"./util\";\r\nimport { Keyring } from \"@polkadot/ui-keyring\";\r\nimport { hexToU8a, isHex } from \"@polkadot/util\";\r\nimport {\r\n  web3Accounts,\r\n  web3AccountsSubscribe,\r\n  web3Enable,\r\n} from \"@polkadot/extension-dapp\";\r\nimport {\r\n  IssueRequestsContext,\r\n  IssueRequestRow,\r\n} from \"./hooks/useIssueRequests\";\r\nimport {\r\n  RedeemRequestsContext,\r\n  RedeemRequestRow,\r\n} from \"./hooks/useRedeemRequest\";\r\nimport { IssueRequest, RequestId, TradingPrice } from \"./interfaces\";\r\nimport { FeeContext } from \"./hooks/useFeeContext\";\r\nimport type { Percent } from \"@polkadot/types/interfaces/runtime\";\r\nimport { decodeAddress, encodeAddress } from \"@polkadot/keyring\";\r\nimport NoExtensions from \"./components/NoExtensions\";\r\n\r\nconst Bridge = lazy(() => import(\"./page/Bridge\"));\r\nconst History = lazy(() => import(\"./page/History/History\"));\r\nconst Vault = lazy(() => import(\"./page/Vault\"));\r\n\r\nconst LayoutWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst MaskStyle = styled.div`\r\n  background: rgba(0, 0, 0, 0.4);\r\n  position: fixed;\r\n  z-index: 2;\r\n  width: 100vw;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const App: React.FC = () => {\r\n  const { t } = useTranslation();\r\n\r\n  // Api Context\r\n  const [api, setApi] = useState<ApiPromise | null>(null);\r\n  const [isApiReady, setApiReady] = useState(false);\r\n\r\n  // Issue requests context\r\n  const [issueRequests, setIssueRequests] = useState<IssueRequestRow[]>([]);\r\n  // Redeem requests context\r\n  const [redeemRequest, setReedemRequest] = useState<RedeemRequestRow[]>([]);\r\n  // const [RedeemRequests, setRedeemRequests] = useState<IssueRequest[]>([]);\r\n  const [downExtensions, setExtensitions] = useState(false)\r\n\r\n  const [exchangeRate, setExchangeRate] = useState<TradingPrice | null>(null);\r\n  const [percent, setPercent] = useState<Percent | null>(null);\r\n  const [pcxPrice, setPcxPrice] = useState<number | null>(null);\r\n  const [bridgeStatus,setBridgeStatus] = useState(\"\")\r\n\r\n  // Accounts Context\r\n  const accountModel = useAccountModel();\r\n \r\n\r\n  // Init Api\r\n  useEffect(() => {\r\n    const types = Object.values(definitions).reduce(\r\n      (res, { types }) => ({ ...res, ...types }),\r\n      {}\r\n    );\r\n    notification.warn({ message: \"Wait ws connecting...\" });\r\n    const provider = new WsProvider(\"wss://xbridge.spiderx.pro/ws\");\r\n    const api = new ApiPromise({ provider, types });\r\n    api.on(\"error\", (err) =>\r\n      notification.error({\r\n        message: `Cannot connect to ws endpoint. Error: ${err}`\r\n      })\r\n    );\r\n    api.on(\"disconnected\", () => setApiReady(false));\r\n    api.on(\"ready\", () => {\r\n      setApi(api);\r\n      setApiReady(true);\r\n      notification.info({ message: \"Endpoint connected.\" });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isApiReady) {\r\n      api!!.query.xGatewayBitcoinV2.issueRequests.entries().then((data) => {\r\n        setIssueRequests(\r\n          data.map(([requestId, value]) => ({\r\n            id: requestId.args[0],\r\n            ...value.unwrap(),\r\n          }))\r\n        );\r\n      });\r\n      api!!.query.xGatewayBitcoinV2.redeemRequests.entries().then((data) => {\r\n        setReedemRequest(\r\n          data.map(([requestId, value]) => ({\r\n            id: requestId.args[0],\r\n            ...value.unwrap(),\r\n          }))\r\n        );\r\n      });\r\n      api!!.rpc.chain.subscribeNewHeads(async () => {\r\n        api!!.query.xGatewayBitcoinV2.issueRequests.entries().then((data) => {\r\n          setIssueRequests(\r\n            data.map(([requestId, value]) => ({\r\n              id: requestId.args[0],\r\n              ...value.unwrap(),\r\n            }))\r\n          );\r\n        });\r\n        api!!.query.xGatewayBitcoinV2.redeemRequests.entries().then((data) => {\r\n          setReedemRequest(\r\n            data.map(([requestId, value]) => ({\r\n              id: requestId.args[0],\r\n              ...value.unwrap(),\r\n            }))\r\n          );\r\n        });\r\n      });\r\n    }\r\n  }, [isApiReady]);\r\n\r\n \r\n  // Init accounts\r\n  useEffect(() => {\r\n    async function initial () {\r\n      const extensions = await web3Enable('polkadot-js/apps');\r\n      if(extensions.length > 0){\r\n        web3Enable(\"X bridge\").then(async () => {\r\n          const accounts = await web3Accounts();\r\n    \r\n          if (accounts.length > 0) {\r\n            accountModel.setCurrentAccount({\r\n              name: accounts[0].meta.name,\r\n              address: ChangeChainXAddress(accounts[0].address),\r\n            });\r\n          }\r\n    \r\n          accountModel.setAccounts(\r\n            accounts.map(({ address, meta: { name } }) => ({\r\n              name,\r\n              address: encodeAddress(decodeAddress(address), 44),\r\n            }))\r\n          );\r\n    \r\n          web3AccountsSubscribe((accounts) => {\r\n            accountModel.setAccounts(\r\n              accounts.map(({ address, meta: { name } }) => ({\r\n                name,\r\n                address: encodeAddress(decodeAddress(address), 44),\r\n              }))\r\n            );\r\n          });\r\n        });\r\n      }else{\r\n        setExtensitions(true)\r\n      }\r\n    }\r\n    initial();\r\n  }, []);\r\n\r\n  // Init fee\r\n  useEffect(() => {\r\n    if (isApiReady) {\r\n      (async () => {\r\n        const tradingPrice = await api!!.query.xGatewayBitcoinV2.exchangeRate();\r\n        const percent = await api!!.query.xGatewayBitcoinV2.issueGriefingFee();\r\n        const price = +JSON.stringify(tradingPrice.price);\r\n        const decimal = +JSON.stringify(tradingPrice.decimal);\r\n        const mult = Math.pow(10, decimal);\r\n        setPercent(percent);\r\n        setExchangeRate(tradingPrice);\r\n        setPcxPrice(price / mult);\r\n        await api!!.rpc.chain.subscribeNewHeads(async () => {\r\n          const tradingPrice = await api!!.query.xGatewayBitcoinV2.exchangeRate();\r\n          const percent = await api!!.query.xGatewayBitcoinV2.issueGriefingFee();\r\n          const price = +JSON.stringify(tradingPrice.price);\r\n          const decimal = +JSON.stringify(tradingPrice.decimal);\r\n          const mult = Math.pow(10, decimal);\r\n          if (\r\n            tradingPrice.price !== exchangeRate?.price ||\r\n            tradingPrice.decimal !== exchangeRate?.decimal ||\r\n            percent !== percent\r\n          ) {\r\n            setExchangeRate(tradingPrice);\r\n            setPercent(percent);\r\n            setPcxPrice(price / mult);\r\n          }\r\n        });\r\n      })();\r\n    }\r\n  }, [isApiReady]);\r\n // init status\r\n  useEffect(() => {\r\n    if(isApiReady){\r\n      (async()=> {\r\n        const status =await api!!.query.xGatewayBitcoinV2.bridgeStatus();\r\n        setBridgeStatus(status.toString())\r\n      })()\r\n    }\r\n  },[isApiReady]);\r\n\r\n  return (\r\n    <>\r\n      {!isApiReady ? (\r\n        <MaskStyle>\r\n          <Loading />\r\n        </MaskStyle>\r\n      ) : null}\r\n      {downExtensions? (\r\n        <MaskStyle>\r\n          <NoExtensions />\r\n        </MaskStyle>\r\n      ) : null}\r\n      <bridgeStatusContext.Provider value={bridgeStatus}>\r\n      <SideBar />\r\n      </bridgeStatusContext.Provider>\r\n      <LayoutWrapper id={\"LayoutWrapper\"}>\r\n        <ApiContext.Provider\r\n          value={{\r\n            api: api!!,\r\n            isApiReady,\r\n          }}\r\n        >\r\n          <IssueRequestsContext.Provider\r\n            value={{\r\n              requests: issueRequests,\r\n            }}\r\n          >\r\n            <RedeemRequestsContext.Provider\r\n              value={{\r\n                requests: redeemRequest,\r\n              }}\r\n            >\r\n              <FeeContext.Provider\r\n                value={{\r\n                  exchangeRate: exchangeRate!!,\r\n                  percent: percent!!,\r\n                  pcxPrice: pcxPrice!!,\r\n                }}\r\n              >\r\n            \r\n                <Header />\r\n               \r\n                <main>\r\n                  <Suspense fallback={<Loading />}>\r\n                    <Switch>\r\n                      <Route path=\"/\" exact component={Bridge} />\r\n                      <Route path=\"/history\" component={History} />\r\n                      <Route path=\"/vault\" component={Vault} />\r\n                    </Switch>\r\n                  </Suspense>\r\n                </main>\r\n              </FeeContext.Provider>\r\n            </RedeemRequestsContext.Provider>\r\n          </IssueRequestsContext.Provider>\r\n        </ApiContext.Provider>\r\n      </LayoutWrapper>\r\n    </>\r\n  );\r\n};\r\nexport const bridgeStatusContext = React.createContext(\"\")\r\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector'\nimport { initReactI18next } from 'react-i18next';\nimport zhTrans from './locales/zh-cn.json'\ni18n\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        resources : {\n            zh:{\n                translation:zhTrans\n            }\n        },\n        fallbackLng: 'en',\n        debug: true,\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        },\n    });\n\nexport default i18n;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport 'antd/dist/antd.css'\nimport { App } from \"./App\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport './i18n'\n\nReactDom.render(\n    <BrowserRouter><App /></BrowserRouter>,\n    document.getElementById(\"root\"));\n"],"sourceRoot":""}