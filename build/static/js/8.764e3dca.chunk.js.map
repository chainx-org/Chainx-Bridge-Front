{"version":3,"sources":["page/History/style.tsx","page/History/History.tsx"],"names":["HistoryStyle","styled","div","FunctionSwitchButton","TableStyle","HistoryTab","History","useState","Issue","activeTab","setActiveTab","issueLog","setIssueLog","currentAccount","useAccountModel","t","useTranslation","setPage","useEffect","a","fetch","address","method","response","json","data","rows","items","map","info","id","_id","amount","btcAmount","chainxAddr","encodeAddress","decodeAddress","requester","vaultBtcAddr","vault","hash","countedBlock","status","columns","title","dataIndex","key","ellipsis","onClick","className","Redeem","rowKey","dataSource"],"mappings":"kPAEaA,EAAeC,IAAOC,IAAV,qGAMZC,EAAuBF,IAAOC,IAAV,qgBA2BpBE,EAAaH,IAAOC,IAAV,iG,4CCnBlBG,E,+GAAAA,O,iBAAAA,I,oBAAAA,M,KA+GUC,UA1Gf,WAAoB,IAAD,EACmBC,mBAAqBF,EAAWG,OADnD,mBACRC,EADQ,KACGC,EADH,OAEiBH,mBAAuB,IAFxC,mBAERI,EAFQ,KAEEC,EAFF,KAGPC,EAAmBC,cAAnBD,eACDE,EAAKC,cAALD,EAJQ,EAKSR,mBAAS,GALlB,mBAKFU,GALE,WAOfC,qBAAU,WACN,sBAAC,gCAAAC,EAAA,sEAC0BC,MAAM,sCAAD,OAEpBX,IAAcJ,EAAWG,MAAQ,iBAAmB,kBAFhC,+CAGQK,QAHR,IAGQA,OAHR,EAGQA,EAAgBQ,SAChD,CACIC,OAAQ,QANnB,cACSC,EADT,gBASsBA,EAASC,OAT/B,OASSC,EATT,OAYOC,EADAjB,IAAcJ,EAAWG,MACjBiB,EAAKE,MAAgBC,KAAgB,SAAAC,GACzC,MAAO,CACHC,GAAID,EAAKE,IACTC,OAAQH,EAAKI,UAAY,IACzBC,WAAYC,YAAcC,YAAcP,EAAKQ,WAAW,IACxDC,aAAcT,EAAKU,MACnBC,KAAM,GACNC,aAAc,EACdC,OAAQb,EAAKa,WAIbjB,EAAKE,MAAgBC,KAAgB,SAAAC,GACzC,MAAO,CACHC,GAAID,EAAKE,IACTC,OAAQH,EAAKG,OAAS,IACtBE,WAAYL,EAAKQ,UACjBC,aAAcT,EAAKU,MACnBC,KAAM,GACNC,aAAc,EACdC,OAAQb,EAAKa,WAIzB9B,EAAYc,GApCf,0CAAD,KAsCD,CAACjB,EAAUI,IACd,IAAM8B,EAAoC,CACtC,CACIC,MAAO7B,EAAU,cACjB8B,UAAW,KACXC,IAAK,MAET,CACIF,MAAO7B,EAAU,UACjB8B,UAAW,SACXC,IAAK,UAET,CACIF,MAAO7B,EAAU,kBACjB8B,UAAW,aACXE,UAAU,EACVD,IAAK,cAET,CACIF,MAAO7B,EAAU,qBACjB8B,UAAW,eACXE,UAAU,EACVD,IAAK,gBAET,CACIF,MAAO7B,EAAU,mBACjB8B,UAAW,OACXC,IAAK,QAET,CACIF,MAAO7B,EAAU,oBACjB8B,UAAW,eACXC,IAAK,gBAET,CACIF,MAAO7B,EAAU,SACjB8B,UAAW,SACXC,IAAK,WAGb,OACI,eAAC,IAAD,WACI,cAAC,IAAD,UACI,+BACI,oBAAIE,QAAS,WACTtC,EAAaL,EAAWG,OACxBS,EAAQ,IACTgC,UAAWxC,IAAcJ,EAAWG,MAAQ,SAAW,OAH1D,SAGmEO,EAAE,WACrE,oBAAIiC,QAAS,WACTtC,EAAaL,EAAW6C,QACxBjC,EAAQ,IACTgC,UAAWxC,IAAcJ,EAAW6C,OAAS,SAAW,OAH3D,SAGoEnC,EAAE,iBAG9E,cAAC,IAAD,UACI,cAAC,IAAD,CAAOoC,OAAQ,qBAAGrB,IAAaa,QAASA,EAASS,WAAYzC","file":"static/js/8.764e3dca.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const HistoryStyle = styled.div`\n  margin: 24px;\n  background: #fff;\n  height: 100%;\n  padding: 30px;\n`\nexport const FunctionSwitchButton = styled.div`\n  font-size: 16px;\n  font-weight: bold;\n  color: #8E8E8E;\n  ul{\n    width: 425px;\n    height: 48px;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    background: #F6F6F6;\n    margin-top: 30px;\n    border-radius: 6px;\n  }\n  li{\n    width: 208px;\n    height: 44px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 6px;\n    &.active{\n      background: #fff;\n      color: #282828;\n    }\n  };\n`\nexport const TableStyle = styled.div`\n margin-top: 36px;\n  .ant-table-cell{\n    background: #fff;\n  }\n`\n","import React, {useState, useEffect} from \"react\";\r\nimport {FunctionSwitchButton, HistoryStyle, TableStyle} from \"./style\";\r\nimport {useTranslation} from \"react-i18next\";\r\nimport {Table} from \"antd\";\r\nimport {ColumnType} from \"antd/lib/table\";\r\nimport useAccountModel from \"../../hooks/useAccountModel\"\r\nimport { decodeAddress, encodeAddress } from \"@polkadot/keyring\";\r\ninterface HistoryRow {\r\n    id: number;\r\n    amount: number;\r\n    chainxAddr: string;\r\n    vaultBtcAddr: string;\r\n    hash: string;\r\n    countedBlock: number;\r\n    status: \"process\" | \"completed\" | \"cancelled\";\r\n}\r\nenum HistoryTab {\r\n    Issue,\r\n    Redeem\r\n}\r\n\r\nfunction History() {\r\n    const [activeTab, setActiveTab] = useState<HistoryTab>(HistoryTab.Issue);\r\n    const [issueLog, setIssueLog] = useState<HistoryRow[]>([]);\r\n    const { currentAccount } = useAccountModel();\r\n    const {t} = useTranslation()\r\n    const [page, setPage] = useState(0);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const response = await fetch(\r\n                `https://api-btc.chainx.org/xbridge/${\r\n                    activeTab === HistoryTab.Issue ? \"issue_requests\" : \"redeem_requests\"\r\n                }?page=0&pageSize=5&requester=${currentAccount?.address}`,\r\n                {\r\n                    method: \"GET\"\r\n                }\r\n            );\r\n            const data = await response.json();\r\n            let rows: HistoryRow[];\r\n            if (activeTab === HistoryTab.Issue) {\r\n                rows = (data.items as any[]).map<HistoryRow>(info => {\r\n                    return {\r\n                        id: info._id,\r\n                        amount: info.btcAmount / 100000000,\r\n                        chainxAddr: encodeAddress(decodeAddress(info.requester),44),\r\n                        vaultBtcAddr: info.vault,\r\n                        hash: \"\",\r\n                        countedBlock: 0,\r\n                        status: info.status\r\n                    };\r\n                });\r\n            } else {\r\n                rows = (data.items as any[]).map<HistoryRow>(info => {\r\n                    return {\r\n                        id: info._id,\r\n                        amount: info.amount / 100000000,\r\n                        chainxAddr: info.requester,\r\n                        vaultBtcAddr: info.vault,\r\n                        hash: \"\",\r\n                        countedBlock: 0,\r\n                        status: info.status\r\n                    };\r\n                });\r\n            }\r\n            setIssueLog(rows);\r\n        })();\r\n    }, [activeTab,currentAccount]);\r\n    const columns: ColumnType<HistoryRow>[] = [\r\n        {\r\n            title: t<string>(\"Issue logo\"),\r\n            dataIndex: \"id\",\r\n            key: \"id\"\r\n        },\r\n        {\r\n            title: t<string>(\"Amount\"),\r\n            dataIndex: \"amount\",\r\n            key: \"amount\"\r\n        },\r\n        {\r\n            title: t<string>(\"ChainX Address\"),\r\n            dataIndex: \"chainxAddr\",\r\n            ellipsis: true,\r\n            key: \"chainxAddr\"\r\n        },\r\n        {\r\n            title: t<string>(\"Vault BTC Address\"),\r\n            dataIndex: \"vaultBtcAddr\",\r\n            ellipsis: true,\r\n            key: \"vaultBtcAddr\"\r\n        },\r\n        {\r\n            title: t<string>(\"BTC transaction\"),\r\n            dataIndex: \"hash\",\r\n            key: \"hash\"\r\n        },\r\n        {\r\n            title: t<string>(\"BTC Confirmation\"),\r\n            dataIndex: \"countedBlock\",\r\n            key: \"countedBlock\"\r\n        },\r\n        {\r\n            title: t<string>(\"State\"),\r\n            dataIndex: \"status\",\r\n            key: \"status\"\r\n        }\r\n    ];\r\n    return (\r\n        <HistoryStyle>\r\n            <FunctionSwitchButton>\r\n                <ul>\r\n                    <li onClick={() => {\r\n                        setActiveTab(HistoryTab.Issue);\r\n                        setPage(0);\r\n                    }} className={activeTab === HistoryTab.Issue ? \"active\" : \"none\"}>{t('issue')}</li>\r\n                    <li onClick={() => {\r\n                        setActiveTab(HistoryTab.Redeem);\r\n                        setPage(0);\r\n                    }} className={activeTab === HistoryTab.Redeem ? \"active\" : \"none\"}>{t('Redeem')}</li>\r\n                </ul>\r\n            </FunctionSwitchButton>\r\n            <TableStyle>\r\n                <Table rowKey={({ id }) => id} columns={columns} dataSource={issueLog} />\r\n            </TableStyle>\r\n        </HistoryStyle>\r\n    )\r\n}\r\nexport default History;\r\n"],"sourceRoot":""}